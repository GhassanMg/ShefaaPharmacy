// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(ShefaaPharmacyDbContext))]
    partial class ShefaaPharmacyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Tables.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountGeneralId")
                        .HasColumnType("int");

                    b.Property<int>("AccountState")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Address2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 781, DateTimeKind.Local).AddTicks(5008));

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<bool>("General")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Tel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Tel2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("Id");

                    b.HasIndex("AccountCategoryId");

                    b.HasIndex("AccountGeneralId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreationBy");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountState = 2,
                            CategoryId = 1,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "الحساب العام"
                        },
                        new
                        {
                            Id = 2,
                            AccountGeneralId = 1,
                            AccountState = 2,
                            CategoryId = 2,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "الزبائن"
                        },
                        new
                        {
                            Id = 3,
                            AccountGeneralId = 1,
                            AccountState = 2,
                            CategoryId = 3,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "الصناديق"
                        },
                        new
                        {
                            Id = 4,
                            AccountGeneralId = 1,
                            AccountState = 2,
                            CategoryId = 4,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "المبيعات"
                        },
                        new
                        {
                            Id = 5,
                            AccountGeneralId = 1,
                            AccountState = 2,
                            CategoryId = 5,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "المشتريات"
                        },
                        new
                        {
                            Id = 6,
                            AccountGeneralId = 1,
                            AccountState = 2,
                            CategoryId = 6,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "المندوبين"
                        },
                        new
                        {
                            Id = 7,
                            AccountGeneralId = 1,
                            AccountState = 2,
                            CategoryId = 9,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "الضرائب"
                        },
                        new
                        {
                            Id = 8,
                            AccountGeneralId = 1,
                            AccountState = 2,
                            CategoryId = 8,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "المصاريف"
                        },
                        new
                        {
                            Id = 9,
                            AccountGeneralId = 1,
                            AccountState = 2,
                            CategoryId = 10,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "رأس المال"
                        },
                        new
                        {
                            Id = 10,
                            AccountGeneralId = 1,
                            AccountState = 2,
                            CategoryId = 11,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "الموجودات"
                        },
                        new
                        {
                            Id = 23,
                            AccountGeneralId = 1,
                            AccountState = 2,
                            CategoryId = 3,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = true,
                            Name = "الإيرادات"
                        },
                        new
                        {
                            Id = 11,
                            AccountGeneralId = 2,
                            AccountState = 2,
                            CategoryId = 2,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "زبائن الصيدلية"
                        },
                        new
                        {
                            Id = 12,
                            AccountGeneralId = 3,
                            AccountState = 2,
                            CategoryId = 3,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "صندوق الصيدلية"
                        },
                        new
                        {
                            Id = 13,
                            AccountGeneralId = 4,
                            AccountState = 2,
                            CategoryId = 4,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "مبيعات الصيدلية"
                        },
                        new
                        {
                            Id = 14,
                            AccountGeneralId = 5,
                            AccountState = 2,
                            CategoryId = 5,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "مشتريات الصيدلية"
                        },
                        new
                        {
                            Id = 15,
                            AccountGeneralId = 7,
                            AccountState = 2,
                            CategoryId = 9,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "ضريبة الصيدلية"
                        },
                        new
                        {
                            Id = 16,
                            AccountGeneralId = 6,
                            AccountState = 2,
                            CategoryId = 6,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "مندوب عام"
                        },
                        new
                        {
                            Id = 17,
                            AccountGeneralId = 8,
                            AccountState = 2,
                            CategoryId = 8,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "مصروف الصيدلية"
                        },
                        new
                        {
                            Id = 18,
                            AccountGeneralId = 9,
                            AccountState = 2,
                            CategoryId = 10,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "رأس مال الصيدلية"
                        },
                        new
                        {
                            Id = 19,
                            AccountGeneralId = 10,
                            AccountState = 2,
                            CategoryId = 11,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "مخزن الأدوية"
                        },
                        new
                        {
                            Id = 20,
                            AccountGeneralId = 8,
                            AccountState = 2,
                            CategoryId = 10,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "مخزن المواد منتهية الصلاحية"
                        },
                        new
                        {
                            Id = 21,
                            AccountGeneralId = 10,
                            AccountState = 2,
                            CategoryId = 11,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "الأصول الثابتة"
                        },
                        new
                        {
                            Id = 22,
                            AccountGeneralId = 8,
                            AccountState = 2,
                            CategoryId = 10,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "الحسم"
                        },
                        new
                        {
                            Id = 24,
                            AccountGeneralId = 23,
                            AccountState = 2,
                            CategoryId = 10,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "مردودات المشتريات"
                        },
                        new
                        {
                            Id = 25,
                            AccountGeneralId = 8,
                            AccountState = 2,
                            CategoryId = 8,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 842, DateTimeKind.Local).AddTicks(5007),
                            General = false,
                            Name = "مردودات المبيعات"
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.AccountBaseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountBaseCategorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "حسابات عامة"
                        },
                        new
                        {
                            Id = 2,
                            Name = "زبائن"
                        },
                        new
                        {
                            Id = 3,
                            Name = "صناديق"
                        },
                        new
                        {
                            Id = 4,
                            Name = "مبيعات"
                        },
                        new
                        {
                            Id = 5,
                            Name = "مشتريات"
                        },
                        new
                        {
                            Id = 6,
                            Name = "موردين"
                        },
                        new
                        {
                            Id = 7,
                            Name = "تأمينات"
                        },
                        new
                        {
                            Id = 8,
                            Name = "مصاريف"
                        },
                        new
                        {
                            Id = 9,
                            Name = "ضرائب"
                        },
                        new
                        {
                            Id = 10,
                            Name = "الأرباح ورأس المال"
                        },
                        new
                        {
                            Id = 11,
                            Name = "الموجودات"
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.AccountCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountBaseCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 784, DateTimeKind.Local).AddTicks(5121));

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("Id");

                    b.HasIndex("AccountBaseCategoryId");

                    b.HasIndex("CreationBy");

                    b.ToTable("AccountCategory");
                });

            modelBuilder.Entity("DataLayer.Tables.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActiveIngredients")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("ArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ArticleIdGeneral")
                        .HasColumnType("int");

                    b.Property<string>("ArticleIdGeneralDescr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caliber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Description2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<bool>("DontUseAnymore")
                        .HasColumnType("bit");

                    b.Property<string>("Dosage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FormatId")
                        .HasColumnType("int");

                    b.Property<string>("FormatIdDescr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interactions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<bool>("IsForeign")
                        .HasColumnType("bit");

                    b.Property<bool>("ItsGeneral")
                        .HasColumnType("bit");

                    b.Property<int>("LimitDown")
                        .HasColumnType("int");

                    b.Property<int>("LimitUp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Note")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Note2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Precautions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ScientificName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("SideEffects")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleCategoryId");

                    b.HasIndex("ArticleIdGeneral");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreationBy");

                    b.HasIndex("FormatId");

                    b.ToTable("Articale");
                });

            modelBuilder.Entity("DataLayer.Tables.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("Id");

                    b.HasIndex("CreationBy");

                    b.ToTable("ArticaleCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 812, DateTimeKind.Local).AddTicks(5003),
                            Name = "أدوية"
                        },
                        new
                        {
                            Id = 2,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 812, DateTimeKind.Local).AddTicks(5003),
                            Name = "اكسسوارات"
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.ArticleUnits", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("QuantityForPrimary")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "UnitTypeId");

                    b.HasIndex("CreationBy");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("ArticleUnits");
                });

            modelBuilder.Entity("DataLayer.Tables.Barcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticaleId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 804, DateTimeKind.Local).AddTicks(5065));

                    b.HasKey("Id");

                    b.HasIndex("ArticaleId");

                    b.HasIndex("CreationBy");

                    b.ToTable("Barcode");
                });

            modelBuilder.Entity("DataLayer.Tables.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticaleId")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BillMasterId")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 790, DateTimeKind.Local).AddTicks(5012));

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("InvoiceKind")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PriceTagId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityGift")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UnitTypeIdBasic")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticaleId");

                    b.HasIndex("BillMasterId");

                    b.HasIndex("CreationBy");

                    b.HasIndex("PriceTagId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("BillDetail");
                });

            modelBuilder.Entity("DataLayer.Tables.BillMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 790, DateTimeKind.Local).AddTicks(5012));

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("InvoiceKind")
                        .HasColumnType("int");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<double>("Payment")
                        .HasColumnType("float");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<double>("RemainingAmount")
                        .HasColumnType("float");

                    b.Property<int>("ReturnTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<double>("TotalItem")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreationBy");

                    b.HasIndex("StoreId");

                    b.HasIndex("YearId");

                    b.ToTable("BillMaster");
                });

            modelBuilder.Entity("DataLayer.Tables.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 799, DateTimeKind.Local).AddTicks(5061));

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("Id");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "جميع الفروع"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "الفرع الرئيسي"
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 805, DateTimeKind.Local).AddTicks(5005));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("Id");

                    b.HasIndex("CreationBy");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ابن الهيثم"
                        },
                        new
                        {
                            Id = 2,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ابن حيان"
                        },
                        new
                        {
                            Id = 3,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ابن رشد"
                        },
                        new
                        {
                            Id = 4,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ابن زهر"
                        },
                        new
                        {
                            Id = 5,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ابن سينا"
                        },
                        new
                        {
                            Id = 6,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "افاميا"
                        },
                        new
                        {
                            Id = 7,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "الأفق"
                        },
                        new
                        {
                            Id = 8,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "البلسم"
                        },
                        new
                        {
                            Id = 9,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "التراميديكا"
                        },
                        new
                        {
                            Id = 10,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "الدولية"
                        },
                        new
                        {
                            Id = 11,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "الرازي"
                        },
                        new
                        {
                            Id = 12,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "الرائد"
                        },
                        new
                        {
                            Id = 13,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "السعد"
                        },
                        new
                        {
                            Id = 14,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "السلام"
                        },
                        new
                        {
                            Id = 15,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "الشهباء"
                        },
                        new
                        {
                            Id = 16,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "الفا"
                        },
                        new
                        {
                            Id = 17,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "الفارس"
                        },
                        new
                        {
                            Id = 18,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "القنواتي"
                        },
                        new
                        {
                            Id = 20,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "الما"
                        },
                        new
                        {
                            Id = 22,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "المتحدة "
                        },
                        new
                        {
                            Id = 23,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "المتوسط"
                        },
                        new
                        {
                            Id = 24,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "النورس"
                        },
                        new
                        {
                            Id = 25,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "الهلال"
                        },
                        new
                        {
                            Id = 26,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "الوطنية"
                        },
                        new
                        {
                            Id = 27,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "اليوسف"
                        },
                        new
                        {
                            Id = 28,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "إميسا"
                        },
                        new
                        {
                            Id = 29,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "أدامكو"
                        },
                        new
                        {
                            Id = 30,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "أسيا"
                        },
                        new
                        {
                            Id = 31,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "أوبري"
                        },
                        new
                        {
                            Id = 32,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "أوشر"
                        },
                        new
                        {
                            Id = 33,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "أوغاريت"
                        },
                        new
                        {
                            Id = 34,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "آسكو فارما"
                        },
                        new
                        {
                            Id = 35,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "بحري"
                        },
                        new
                        {
                            Id = 36,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "بركات"
                        },
                        new
                        {
                            Id = 38,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "برولاين"
                        },
                        new
                        {
                            Id = 39,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "بيوميد"
                        },
                        new
                        {
                            Id = 40,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ترياق"
                        },
                        new
                        {
                            Id = 41,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "حماة فارما"
                        },
                        new
                        {
                            Id = 42,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "حياة فارما"
                        },
                        new
                        {
                            Id = 43,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "دلتا"
                        },
                        new
                        {
                            Id = 44,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "دومنا"
                        },
                        new
                        {
                            Id = 45,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "دياموند"
                        },
                        new
                        {
                            Id = 46,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "راما فارما"
                        },
                        new
                        {
                            Id = 48,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "رشا"
                        },
                        new
                        {
                            Id = 49,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "زين فارما"
                        },
                        new
                        {
                            Id = 50,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "سرّاج"
                        },
                        new
                        {
                            Id = 51,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "سلامة كير"
                        },
                        new
                        {
                            Id = 52,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "سيتي فارما"
                        },
                        new
                        {
                            Id = 53,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "سيردا فارما"
                        },
                        new
                        {
                            Id = 54,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "سيفارما"
                        },
                        new
                        {
                            Id = 55,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "شرق المتوسط(ليم)"
                        },
                        new
                        {
                            Id = 57,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "شفا"
                        },
                        new
                        {
                            Id = 58,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "عبد الوهّاب القنواتي"
                        },
                        new
                        {
                            Id = 59,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "غولدن ميد فارما ( الذهبية ) "
                        },
                        new
                        {
                            Id = 60,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "فارماسير"
                        },
                        new
                        {
                            Id = 61,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "فكتوريا"
                        },
                        new
                        {
                            Id = 62,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "فيتا"
                        },
                        new
                        {
                            Id = 63,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "كسبار و شعباني"
                        },
                        new
                        {
                            Id = 64,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "كندة فارما"
                        },
                        new
                        {
                            Id = 65,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "كيمي"
                        },
                        new
                        {
                            Id = 66,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "لاما فارما"
                        },
                        new
                        {
                            Id = 67,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ماجيكو"
                        },
                        new
                        {
                            Id = 68,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "مسعود فارما"
                        },
                        new
                        {
                            Id = 69,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "مسعود للمحاليل الطبية"
                        },
                        new
                        {
                            Id = 70,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "معتوق فارما"
                        },
                        new
                        {
                            Id = 71,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "مياميد"
                        },
                        new
                        {
                            Id = 72,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ميديفارم"
                        },
                        new
                        {
                            Id = 73,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ميديكو"
                        },
                        new
                        {
                            Id = 74,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ميديوتيك"
                        },
                        new
                        {
                            Id = 75,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ميرسي فارما"
                        },
                        new
                        {
                            Id = 76,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "ميغا فارما"
                        },
                        new
                        {
                            Id = 77,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "هيومن"
                        },
                        new
                        {
                            Id = 78,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "يونايتد"
                        },
                        new
                        {
                            Id = 79,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "يونيشيما"
                        },
                        new
                        {
                            Id = 80,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 834, DateTimeKind.Local).AddTicks(5007),
                            Location = "Damascus",
                            Name = "يونيفارما"
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.Connection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Connection");
                });

            modelBuilder.Entity("DataLayer.Tables.DataBaseConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTaxId")
                        .HasColumnType("int");

                    b.Property<int>("CountNumberAfterComma")
                        .HasColumnType("int");

                    b.Property<int>("DateIfNotUpdatedExternal")
                        .HasColumnType("int");

                    b.Property<int>("DateIfNotUpdatedLocal")
                        .HasColumnType("int");

                    b.Property<int>("DayForExpiry")
                        .HasColumnType("int");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoundToNearest")
                        .HasColumnType("int");

                    b.Property<double>("TaxValue")
                        .HasColumnType("float");

                    b.Property<double>("ValueSellPrice")
                        .HasColumnType("float");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTaxId");

                    b.ToTable("DataBaseConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountTaxId = 12,
                            CountNumberAfterComma = 0,
                            DateIfNotUpdatedExternal = 10,
                            DateIfNotUpdatedLocal = 30,
                            DayForExpiry = 60,
                            DiscountPercentage = 0.0,
                            RoundToNearest = 0,
                            TaxValue = 0.0,
                            ValueSellPrice = 0.0,
                            VersionNumber = "B12"
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.EntryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 794, DateTimeKind.Local).AddTicks(5013));

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryMasterId")
                        .HasColumnType("int");

                    b.Property<int>("KindOperation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreationBy");

                    b.HasIndex("EntryMasterId");

                    b.ToTable("EntryDetail");
                });

            modelBuilder.Entity("DataLayer.Tables.EntryMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 792, DateTimeKind.Local).AddTicks(5011));

                    b.Property<int>("KindOperation")
                        .HasColumnType("int");

                    b.Property<int>("RelatedDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("TotalCredit")
                        .HasColumnType("float");

                    b.Property<double>("TotalDebit")
                        .HasColumnType("float");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreationBy");

                    b.HasIndex("YearId");

                    b.ToTable("EntryMaster");
                });

            modelBuilder.Entity("DataLayer.Tables.ExistStuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Count")
                        .HasColumnType("float");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 806, DateTimeKind.Local).AddTicks(5006));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreationBy");

                    b.ToTable("ExistStuff");
                });

            modelBuilder.Entity("DataLayer.Tables.ExpiryTransfeerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleIdDescr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 806, DateTimeKind.Local).AddTicks(5006));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeftQuantity")
                        .HasColumnType("int");

                    b.Property<int>("TransQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UnitIdDescr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreationBy");

                    b.ToTable("ExpiryTransfeerDetail");
                });

            modelBuilder.Entity("DataLayer.Tables.FirstTimeArticles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 808, DateTimeKind.Local).AddTicks(5005));

                    b.Property<DateTime>("Expirydate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceKind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UnitIdDescr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreationBy");

                    b.ToTable("FirstTimeArticles");
                });

            modelBuilder.Entity("DataLayer.Tables.Format", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Formats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "cap"
                        },
                        new
                        {
                            Id = 2,
                            Name = "coated-tab"
                        },
                        new
                        {
                            Id = 3,
                            Name = "supp"
                        },
                        new
                        {
                            Id = 4,
                            Name = "syrup"
                        },
                        new
                        {
                            Id = 5,
                            Name = "cream"
                        },
                        new
                        {
                            Id = 6,
                            Name = "tab"
                        },
                        new
                        {
                            Id = 7,
                            Name = "susp"
                        },
                        new
                        {
                            Id = 10,
                            Name = "effervi-tab"
                        },
                        new
                        {
                            Id = 11,
                            Name = "oint"
                        },
                        new
                        {
                            Id = 12,
                            Name = "gel"
                        },
                        new
                        {
                            Id = 13,
                            Name = "solu"
                        },
                        new
                        {
                            Id = 14,
                            Name = "oral-vial"
                        },
                        new
                        {
                            Id = 15,
                            Name = "SR-tab"
                        },
                        new
                        {
                            Id = 16,
                            Name = "gargle"
                        },
                        new
                        {
                            Id = 17,
                            Name = "nasal-spray"
                        },
                        new
                        {
                            Id = 18,
                            Name = "coated-tab plastic-bottle"
                        },
                        new
                        {
                            Id = 19,
                            Name = "nasal-gel"
                        },
                        new
                        {
                            Id = 20,
                            Name = "cap for inhal"
                        },
                        new
                        {
                            Id = 21,
                            Name = "oral-drop"
                        },
                        new
                        {
                            Id = 22,
                            Name = "dry-syrup"
                        },
                        new
                        {
                            Id = 23,
                            Name = "MR-tab"
                        },
                        new
                        {
                            Id = 24,
                            Name = "oral-gel"
                        },
                        new
                        {
                            Id = 25,
                            Name = "DR-cap"
                        },
                        new
                        {
                            Id = 26,
                            Name = "sachet"
                        },
                        new
                        {
                            Id = 27,
                            Name = "dose nasal-spray"
                        },
                        new
                        {
                            Id = 28,
                            Name = "inh-cap"
                        },
                        new
                        {
                            Id = 29,
                            Name = "caplet"
                        },
                        new
                        {
                            Id = 30,
                            Name = "caplet in plastic-cont"
                        },
                        new
                        {
                            Id = 31,
                            Name = "gum"
                        },
                        new
                        {
                            Id = 32,
                            Name = "dispersable-tab"
                        },
                        new
                        {
                            Id = 33,
                            Name = "SR-coated-tab"
                        },
                        new
                        {
                            Id = 34,
                            Name = "SR-cap"
                        },
                        new
                        {
                            Id = 35,
                            Name = "vag-solu"
                        },
                        new
                        {
                            Id = 36,
                            Name = "chew-tab"
                        },
                        new
                        {
                            Id = 37,
                            Name = "ovule"
                        },
                        new
                        {
                            Id = 38,
                            Name = "vag-ovule"
                        },
                        new
                        {
                            Id = 39,
                            Name = "vag-cream"
                        },
                        new
                        {
                            Id = 40,
                            Name = "nail-solu"
                        },
                        new
                        {
                            Id = 41,
                            Name = "oral-paste"
                        },
                        new
                        {
                            Id = 42,
                            Name = "ear-drop"
                        },
                        new
                        {
                            Id = 43,
                            Name = "amp"
                        },
                        new
                        {
                            Id = 44,
                            Name = "vial"
                        },
                        new
                        {
                            Id = 45,
                            Name = "eye-oint"
                        },
                        new
                        {
                            Id = 46,
                            Name = "rectal-cream"
                        },
                        new
                        {
                            Id = 47,
                            Name = "dry-vial"
                        },
                        new
                        {
                            Id = 48,
                            Name = "emultion"
                        },
                        new
                        {
                            Id = 49,
                            Name = "enema"
                        },
                        new
                        {
                            Id = 50,
                            Name = "vag-douch"
                        },
                        new
                        {
                            Id = 51,
                            Name = "XR-tab"
                        },
                        new
                        {
                            Id = 52,
                            Name = "vag-tab"
                        },
                        new
                        {
                            Id = 53,
                            Name = "elexir"
                        },
                        new
                        {
                            Id = 54,
                            Name = "vag-douch + app"
                        },
                        new
                        {
                            Id = 55,
                            Name = "lotion"
                        },
                        new
                        {
                            Id = 56,
                            Name = "mouth-wash"
                        },
                        new
                        {
                            Id = 57,
                            Name = "cartridge"
                        },
                        new
                        {
                            Id = 58,
                            Name = "coated-tab+loz"
                        },
                        new
                        {
                            Id = 59,
                            Name = "loz"
                        },
                        new
                        {
                            Id = 60,
                            Name = "dental-cartridge"
                        },
                        new
                        {
                            Id = 61,
                            Name = "gum-tab"
                        },
                        new
                        {
                            Id = 62,
                            Name = "plast-oral-drop"
                        },
                        new
                        {
                            Id = 63,
                            Name = "chew-gum"
                        },
                        new
                        {
                            Id = 64,
                            Name = "powder"
                        },
                        new
                        {
                            Id = 65,
                            Name = "سوار للمعصم"
                        },
                        new
                        {
                            Id = 66,
                            Name = "salt"
                        },
                        new
                        {
                            Id = 67,
                            Name = "shampoo"
                        },
                        new
                        {
                            Id = 68,
                            Name = "rectal-oint"
                        },
                        new
                        {
                            Id = 69,
                            Name = "nasal-drop"
                        },
                        new
                        {
                            Id = 70,
                            Name = "sublingual-tab"
                        },
                        new
                        {
                            Id = 71,
                            Name = "soap"
                        },
                        new
                        {
                            Id = 72,
                            Name = "balsam"
                        },
                        new
                        {
                            Id = 73,
                            Name = "spray"
                        },
                        new
                        {
                            Id = 74,
                            Name = "aerosol-spray"
                        },
                        new
                        {
                            Id = 75,
                            Name = "DR-tab"
                        },
                        new
                        {
                            Id = 76,
                            Name = "vial+amp+lido"
                        },
                        new
                        {
                            Id = 77,
                            Name = "vial+W.F.I."
                        },
                        new
                        {
                            Id = 78,
                            Name = "vial+water-amp"
                        },
                        new
                        {
                            Id = 79,
                            Name = "vial+amp"
                        },
                        new
                        {
                            Id = 80,
                            Name = "eye-drop"
                        },
                        new
                        {
                            Id = 81,
                            Name = "aplicapeye-oint"
                        },
                        new
                        {
                            Id = 82,
                            Name = "gel-cap"
                        },
                        new
                        {
                            Id = 83,
                            Name = "soft-cap"
                        },
                        new
                        {
                            Id = 84,
                            Name = "vial+lido"
                        },
                        new
                        {
                            Id = 85,
                            Name = "dental-gel"
                        },
                        new
                        {
                            Id = 86,
                            Name = "vag-gel"
                        },
                        new
                        {
                            Id = 87,
                            Name = "XR-coated-tab"
                        },
                        new
                        {
                            Id = 88,
                            Name = "serum+urocap"
                        },
                        new
                        {
                            Id = 89,
                            Name = "serum+urocap+2way"
                        },
                        new
                        {
                            Id = 90,
                            Name = "vag soft-gel-cap"
                        },
                        new
                        {
                            Id = 91,
                            Name = "plastic-amp eye-drop"
                        },
                        new
                        {
                            Id = 92,
                            Name = "dry-susp"
                        },
                        new
                        {
                            Id = 93,
                            Name = "ER-tab"
                        },
                        new
                        {
                            Id = 94,
                            Name = "serum"
                        },
                        new
                        {
                            Id = 95,
                            Name = "bi-tab"
                        },
                        new
                        {
                            Id = 96,
                            Name = "soft-gel-cap"
                        },
                        new
                        {
                            Id = 97,
                            Name = "coated-tab in plastic-bottle"
                        },
                        new
                        {
                            Id = 98,
                            Name = "bottle"
                        },
                        new
                        {
                            Id = 99,
                            Name = "bag"
                        },
                        new
                        {
                            Id = 100,
                            Name = "plastic-amp"
                        },
                        new
                        {
                            Id = 101,
                            Name = "plastic-vial"
                        },
                        new
                        {
                            Id = 102,
                            Name = "syrup in plastic-dose"
                        },
                        new
                        {
                            Id = 103,
                            Name = "tooth-paste"
                        },
                        new
                        {
                            Id = 104,
                            Name = "surup"
                        },
                        new
                        {
                            Id = 105,
                            Name = "syrup single-dose"
                        },
                        new
                        {
                            Id = 106,
                            Name = "plastic single-dose"
                        },
                        new
                        {
                            Id = 107,
                            Name = "foam"
                        },
                        new
                        {
                            Id = 108,
                            Name = "disinteg-tab"
                        },
                        new
                        {
                            Id = 109,
                            Name = "coated-tab alum-strip"
                        },
                        new
                        {
                            Id = 110,
                            Name = "pre-filled syringe"
                        },
                        new
                        {
                            Id = 111,
                            Name = "coated-tab in plstic-bottle"
                        },
                        new
                        {
                            Id = 112,
                            Name = "coated-tab in Alu"
                        },
                        new
                        {
                            Id = 113,
                            Name = "plstic-amp"
                        },
                        new
                        {
                            Id = 114,
                            Name = "powder-sachet"
                        },
                        new
                        {
                            Id = 115,
                            Name = "powder-spray"
                        },
                        new
                        {
                            Id = 116,
                            Name = "vial+2W.F.I."
                        },
                        new
                        {
                            Id = 117,
                            Name = "vial+1W.F.I. 5ml"
                        },
                        new
                        {
                            Id = 118,
                            Name = "vial+2W.F.I. 2ml"
                        },
                        new
                        {
                            Id = 119,
                            Name = "oral-drops"
                        },
                        new
                        {
                            Id = 120,
                            Name = "ear+nasal-drop"
                        },
                        new
                        {
                            Id = 121,
                            Name = "eye+ear-drop"
                        },
                        new
                        {
                            Id = 122,
                            Name = "vial-plastic"
                        },
                        new
                        {
                            Id = 123,
                            Name = "gelatin-cap"
                        },
                        new
                        {
                            Id = 124,
                            Name = "cap in plastic-bottle"
                        },
                        new
                        {
                            Id = 125,
                            Name = "cap in blister"
                        },
                        new
                        {
                            Id = 126,
                            Name = "cap/sachet"
                        },
                        new
                        {
                            Id = 127,
                            Name = "emul-gel"
                        },
                        new
                        {
                            Id = 128,
                            Name = "tab-plister"
                        },
                        new
                        {
                            Id = 129,
                            Name = "rect-oint"
                        },
                        new
                        {
                            Id = 130,
                            Name = "tab in plastic-bottle"
                        },
                        new
                        {
                            Id = 131,
                            Name = "liquied-soap"
                        },
                        new
                        {
                            Id = 132,
                            Name = "mouth-gel"
                        },
                        new
                        {
                            Id = 133,
                            Name = "coated-tab plister"
                        },
                        new
                        {
                            Id = 134,
                            Name = "oint in glass-bottle"
                        },
                        new
                        {
                            Id = 135,
                            Name = "oint in plastic-bottle"
                        },
                        new
                        {
                            Id = 136,
                            Name = "cap in bottle"
                        },
                        new
                        {
                            Id = 137,
                            Name = "coated-tab/sachet"
                        },
                        new
                        {
                            Id = 138,
                            Name = "tab/sachet"
                        },
                        new
                        {
                            Id = 139,
                            Name = "tab in bottle"
                        },
                        new
                        {
                            Id = 140,
                            Name = "coated-tab in bottle"
                        },
                        new
                        {
                            Id = 141,
                            Name = "XR-cap"
                        },
                        new
                        {
                            Id = 142,
                            Name = "PR-tab"
                        },
                        new
                        {
                            Id = 143,
                            Name = "puff"
                        },
                        new
                        {
                            Id = 144,
                            Name = "solu/glass"
                        },
                        new
                        {
                            Id = 145,
                            Name = "solu/plastic"
                        },
                        new
                        {
                            Id = 146,
                            Name = "susp/gls"
                        },
                        new
                        {
                            Id = 147,
                            Name = "ear+eye+nasal-drop"
                        },
                        new
                        {
                            Id = 148,
                            Name = "ear+eye+nasal-oint"
                        },
                        new
                        {
                            Id = 149,
                            Name = "oral-drop glass-bottle"
                        },
                        new
                        {
                            Id = 150,
                            Name = "oral-drop plasrtic-bottle"
                        },
                        new
                        {
                            Id = 151,
                            Name = "eye-wash"
                        },
                        new
                        {
                            Id = 152,
                            Name = "nasal-wash"
                        },
                        new
                        {
                            Id = 153,
                            Name = "eye-gel"
                        },
                        new
                        {
                            Id = 154,
                            Name = "eye+nose-drop"
                        },
                        new
                        {
                            Id = 155,
                            Name = "oral-drop in glass"
                        },
                        new
                        {
                            Id = 156,
                            Name = "oral-drop in plastic"
                        },
                        new
                        {
                            Id = 157,
                            Name = "tab-sachet"
                        },
                        new
                        {
                            Id = 158,
                            Name = "tab in glass-bottle"
                        },
                        new
                        {
                            Id = 159,
                            Name = "dental-paste"
                        },
                        new
                        {
                            Id = 160,
                            Name = "coated-tab in glass-bottle"
                        },
                        new
                        {
                            Id = 161,
                            Name = "solu+spray"
                        },
                        new
                        {
                            Id = 162,
                            Name = "coated-tab glass-bottle"
                        },
                        new
                        {
                            Id = 163,
                            Name = "paste"
                        },
                        new
                        {
                            Id = 164,
                            Name = "eye&ear-drop"
                        },
                        new
                        {
                            Id = 165,
                            Name = "cream-beige"
                        },
                        new
                        {
                            Id = 166,
                            Name = "cream-rose"
                        },
                        new
                        {
                            Id = 167,
                            Name = "eye-solu"
                        },
                        new
                        {
                            Id = 168,
                            Name = "dispers-tab"
                        },
                        new
                        {
                            Id = 169,
                            Name = "oval-tab"
                        },
                        new
                        {
                            Id = 170,
                            Name = "glycerol-gel"
                        },
                        new
                        {
                            Id = 171,
                            Name = "vag-oint"
                        },
                        new
                        {
                            Id = 172,
                            Name = "oral-drop glass-dropper"
                        },
                        new
                        {
                            Id = 173,
                            Name = "oral-drop plastic-dropper"
                        },
                        new
                        {
                            Id = 174,
                            Name = "cartoon"
                        },
                        new
                        {
                            Id = 175,
                            Name = "oral-solu"
                        },
                        new
                        {
                            Id = 176,
                            Name = "cream in plastic-tube"
                        },
                        new
                        {
                            Id = 177,
                            Name = "one-dose-vial"
                        },
                        new
                        {
                            Id = 178,
                            Name = "vag-efferv-tab"
                        },
                        new
                        {
                            Id = 179,
                            Name = "serum in p.v.c. bag+port+butterflycap"
                        },
                        new
                        {
                            Id = 180,
                            Name = "serum in p.v.c. bag+port+vialcap"
                        },
                        new
                        {
                            Id = 181,
                            Name = "serum in p-p-bag+port+vialCap"
                        },
                        new
                        {
                            Id = 182,
                            Name = "serum+port+butterflyCap"
                        },
                        new
                        {
                            Id = 183,
                            Name = "serum+port+butterflyCap+aluBag"
                        },
                        new
                        {
                            Id = 184,
                            Name = "serum+port+vialCap"
                        },
                        new
                        {
                            Id = 185,
                            Name = "plastic-bag"
                        },
                        new
                        {
                            Id = 186,
                            Name = "CR-tab"
                        },
                        new
                        {
                            Id = 187,
                            Name = "MR-cap"
                        },
                        new
                        {
                            Id = 188,
                            Name = "sunLing-tab"
                        },
                        new
                        {
                            Id = 189,
                            Name = "hand-wash"
                        },
                        new
                        {
                            Id = 190,
                            Name = "oil"
                        },
                        new
                        {
                            Id = 191,
                            Name = "cream + applicator"
                        },
                        new
                        {
                            Id = 192,
                            Name = "dose-spray"
                        },
                        new
                        {
                            Id = 193,
                            Name = "hand-gel"
                        },
                        new
                        {
                            Id = 194,
                            Name = "dressing"
                        },
                        new
                        {
                            Id = 195,
                            Name = "milk"
                        },
                        new
                        {
                            Id = 196,
                            Name = "trans-solu"
                        },
                        new
                        {
                            Id = 197,
                            Name = "oral-spray"
                        },
                        new
                        {
                            Id = 198,
                            Name = "lip-stick"
                        },
                        new
                        {
                            Id = 199,
                            Name = "rectal-solu"
                        },
                        new
                        {
                            Id = 200,
                            Name = "derm-solu"
                        },
                        new
                        {
                            Id = 201,
                            Name = "sol + محقن"
                        },
                        new
                        {
                            Id = 202,
                            Name = "gel + applicator"
                        },
                        new
                        {
                            Id = 203,
                            Name = "foam-solu"
                        },
                        new
                        {
                            Id = 204,
                            Name = "nasal spray"
                        },
                        new
                        {
                            Id = 205,
                            Name = "solu+محقن"
                        },
                        new
                        {
                            Id = 206,
                            Name = "ER-cap"
                        },
                        new
                        {
                            Id = 207,
                            Name = "plastic-vial+urocap+2 way"
                        },
                        new
                        {
                            Id = 208,
                            Name = "plastic-vial+urocap"
                        },
                        new
                        {
                            Id = 209,
                            Name = "dry-syrup in-gls"
                        },
                        new
                        {
                            Id = 210,
                            Name = "dry-syrup in-pls"
                        },
                        new
                        {
                            Id = 211,
                            Name = "eye-susp"
                        },
                        new
                        {
                            Id = 212,
                            Name = "alcool-sol"
                        },
                        new
                        {
                            Id = 213,
                            Name = "water-sol"
                        },
                        new
                        {
                            Id = 214,
                            Name = "loz-diet"
                        },
                        new
                        {
                            Id = 215,
                            Name = "puff-nasal-spray"
                        },
                        new
                        {
                            Id = 216,
                            Name = "vag-cream+applic"
                        },
                        new
                        {
                            Id = 217,
                            Name = "oral-granules"
                        },
                        new
                        {
                            Id = 218,
                            Name = "vial-W.F.I."
                        },
                        new
                        {
                            Id = 219,
                            Name = "vial + W.F.I."
                        },
                        new
                        {
                            Id = 220,
                            Name = "rectal-douch"
                        },
                        new
                        {
                            Id = 221,
                            Name = "dental+dermal-spray"
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.Inventory", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("PriceTagId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "UnitTypeId", "BranchId", "StoreId", "PriceTagId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PriceTagId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("DataLayer.Tables.Medicines", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caliber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormatIdDescr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScientificName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("DataLayer.Tables.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderMasterId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CreationBy");

                    b.HasIndex("OrderMasterId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DataLayer.Tables.OrderMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreationBy");

                    b.ToTable("OrderMasters");
                });

            modelBuilder.Entity("DataLayer.Tables.PriceTagDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BuyPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 798, DateTimeKind.Local).AddTicks(5018));

                    b.Property<int>("PriceTagId")
                        .HasColumnType("int");

                    b.Property<double>("SellPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationBy");

                    b.HasIndex("PriceTagId");

                    b.HasIndex("UnitId");

                    b.ToTable("PriceTagDetail");
                });

            modelBuilder.Entity("DataLayer.Tables.PriceTagMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CountAllItem")
                        .HasColumnType("int");

                    b.Property<int>("CountGiftItem")
                        .HasColumnType("int");

                    b.Property<int>("CountSoldItem")
                        .HasColumnType("int");

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 795, DateTimeKind.Local).AddTicks(5064));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PharmacyOperator1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyOperator2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreationBy");

                    b.HasIndex("UnitId");

                    b.HasIndex("YearId");

                    b.ToTable("PriceTagMaster");
                });

            modelBuilder.Entity("DataLayer.Tables.SettingNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DayCountForRemind")
                        .HasColumnType("int");

                    b.Property<int>("DeleteAfterDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SettingNotifications");
                });

            modelBuilder.Entity("DataLayer.Tables.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 2,
                            Name = "جميع المستودعات"
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 2,
                            Name = "المستودع الأول"
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.TaxAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaxAccount");
                });

            modelBuilder.Entity("DataLayer.Tables.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 802, DateTimeKind.Local).AddTicks(5013));

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("Id");

                    b.HasIndex("CreationBy");

                    b.ToTable("UnitType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 812, DateTimeKind.Local).AddTicks(5003),
                            Name = "لا يوجد"
                        },
                        new
                        {
                            Id = 2,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 812, DateTimeKind.Local).AddTicks(5003),
                            Name = "طرد"
                        },
                        new
                        {
                            Id = 3,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 812, DateTimeKind.Local).AddTicks(5003),
                            Name = "علبة"
                        },
                        new
                        {
                            Id = 4,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 812, DateTimeKind.Local).AddTicks(5003),
                            Name = "ظرف"
                        },
                        new
                        {
                            Id = 5,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 812, DateTimeKind.Local).AddTicks(5003),
                            Name = "حبة"
                        },
                        new
                        {
                            Id = 6,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 812, DateTimeKind.Local).AddTicks(5003),
                            Name = "إبرة"
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("Freez")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("StoreId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Freez = false,
                            Name = "All User",
                            Password = "allUser",
                            Position = 0,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 2,
                            Freez = false,
                            Name = "admin",
                            Password = "admin",
                            Position = 0,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 2,
                            Freez = false,
                            Name = "manager",
                            Password = "manager",
                            Position = 1,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 2,
                            Freez = false,
                            Name = "dataEntry",
                            Password = "dataEntry",
                            Position = 2,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 2,
                            Freez = false,
                            Name = "reportReader",
                            Password = "reportReader",
                            Position = 3,
                            StoreId = 2
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.UserNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DontRemindMeLater")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RemindMeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RemindMeLater")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("DataLayer.Tables.UserPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuyAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("CanBuyBill")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeleteBill")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeleteEntry")
                        .HasColumnType("bit");

                    b.Property<bool>("CanInsertEntry")
                        .HasColumnType("bit");

                    b.Property<bool>("CanSellBill")
                        .HasColumnType("bit");

                    b.Property<int>("CashAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerAccountId")
                        .HasColumnType("int");

                    b.Property<int>("SellAccountId")
                        .HasColumnType("int");

                    b.Property<int>("UserDesktopUI")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyAccountId");

                    b.HasIndex("CashAccountId");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("SellAccountId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            BuyAccountId = 14,
                            CanBuyBill = true,
                            CanDeleteBill = true,
                            CanDeleteEntry = true,
                            CanInsertEntry = true,
                            CanSellBill = true,
                            CashAccountId = 12,
                            CustomerAccountId = 11,
                            SellAccountId = 13,
                            UserDesktopUI = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BuyAccountId = 14,
                            CanBuyBill = false,
                            CanDeleteBill = false,
                            CanDeleteEntry = false,
                            CanInsertEntry = false,
                            CanSellBill = false,
                            CashAccountId = 12,
                            CustomerAccountId = 11,
                            SellAccountId = 13,
                            UserDesktopUI = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BuyAccountId = 14,
                            CanBuyBill = false,
                            CanDeleteBill = false,
                            CanDeleteEntry = false,
                            CanInsertEntry = false,
                            CanSellBill = false,
                            CashAccountId = 12,
                            CustomerAccountId = 11,
                            SellAccountId = 13,
                            UserDesktopUI = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            BuyAccountId = 14,
                            CanBuyBill = false,
                            CanDeleteBill = false,
                            CanDeleteEntry = false,
                            CanInsertEntry = false,
                            CanSellBill = false,
                            CashAccountId = 12,
                            CustomerAccountId = 11,
                            SellAccountId = 13,
                            UserDesktopUI = 1,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreationBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 15, 38, 18, 801, DateTimeKind.Local).AddTicks(5017));

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.HasKey("Id");

                    b.HasIndex("CreationBy");

                    b.ToTable("Year");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationBy = 2,
                            CreationDate = new DateTime(2022, 10, 19, 15, 38, 18, 812, DateTimeKind.Local).AddTicks(5003),
                            Name = "2022"
                        });
                });

            modelBuilder.Entity("DataLayer.Tables.Account", b =>
                {
                    b.HasOne("DataLayer.Tables.AccountCategory", null)
                        .WithMany("Accounts")
                        .HasForeignKey("AccountCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Tables.Account", "AccountGeneral")
                        .WithMany()
                        .HasForeignKey("AccountGeneralId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Tables.AccountBaseCategory", "AccountBaseCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.AccountCategory", b =>
                {
                    b.HasOne("DataLayer.Tables.AccountBaseCategory", "AccountBaseCategory")
                        .WithMany("AccountCategorys")
                        .HasForeignKey("AccountBaseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.Article", b =>
                {
                    b.HasOne("DataLayer.Tables.ArticleCategory", "ArticleCategory")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Article", "ArticleGeneral")
                        .WithMany()
                        .HasForeignKey("ArticleIdGeneral")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Tables.Company", "Company")
                        .WithMany("Articales")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Format", "Format")
                        .WithMany()
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataLayer.Tables.ArticleCategory", b =>
                {
                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.ArticleUnits", b =>
                {
                    b.HasOne("DataLayer.Tables.Article", "Article")
                        .WithMany("ArticleUnits")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.UnitType", "UnitType")
                        .WithMany("ArticleUnits")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.Barcode", b =>
                {
                    b.HasOne("DataLayer.Tables.Article", "Articale")
                        .WithMany("Barcodes")
                        .HasForeignKey("ArticaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.BillDetail", b =>
                {
                    b.HasOne("DataLayer.Tables.Article", "Articale")
                        .WithMany("BillDetails")
                        .HasForeignKey("ArticaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.BillMaster", "BillMaster")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.PriceTagMaster", "PriceTag")
                        .WithMany()
                        .HasForeignKey("PriceTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.UnitType", "UnitType")
                        .WithMany("BillDetails")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.BillMaster", b =>
                {
                    b.HasOne("DataLayer.Tables.Account", "Account")
                        .WithMany("BillMasters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Branch", "Branch")
                        .WithMany("BillMasters")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Year", "Year")
                        .WithMany("BillMasters")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.Company", b =>
                {
                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.Connection", b =>
                {
                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.DataBaseConfiguration", b =>
                {
                    b.HasOne("DataLayer.Tables.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountTaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.EntryDetail", b =>
                {
                    b.HasOne("DataLayer.Tables.Account", "Account")
                        .WithMany("EntryDetails")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.EntryMaster", "EntryMaster")
                        .WithMany("EntryDetails")
                        .HasForeignKey("EntryMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.EntryMaster", b =>
                {
                    b.HasOne("DataLayer.Tables.Account", null)
                        .WithMany("EntryMasters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Tables.Branch", null)
                        .WithMany("EntryMasters")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Year", "Year")
                        .WithMany("EntryMasters")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.ExistStuff", b =>
                {
                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.ExpiryTransfeerDetail", b =>
                {
                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.FirstTimeArticles", b =>
                {
                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.Inventory", b =>
                {
                    b.HasOne("DataLayer.Tables.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.PriceTagMaster", "PriceTag")
                        .WithMany()
                        .HasForeignKey("PriceTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.OrderDetail", b =>
                {
                    b.HasOne("DataLayer.Tables.Article", "Articale")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.OrderMaster", "OrderMaster")
                        .WithMany("Details")
                        .HasForeignKey("OrderMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.OrderMaster", b =>
                {
                    b.HasOne("DataLayer.Tables.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.PriceTagDetail", b =>
                {
                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.PriceTagMaster", "PriceTagMaster")
                        .WithMany("PriceTagDetails")
                        .HasForeignKey("PriceTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.PriceTagMaster", b =>
                {
                    b.HasOne("DataLayer.Tables.Article", "Article")
                        .WithMany("PriceTagMasters")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Year", null)
                        .WithMany("PriceTags")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataLayer.Tables.Store", b =>
                {
                    b.HasOne("DataLayer.Tables.Branch", "Branch")
                        .WithMany("Stores")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.UnitType", b =>
                {
                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.User", b =>
                {
                    b.HasOne("DataLayer.Tables.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.UserPermissions", b =>
                {
                    b.HasOne("DataLayer.Tables.Account", "BuyAccount")
                        .WithMany()
                        .HasForeignKey("BuyAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Account", "CashAccount")
                        .WithMany()
                        .HasForeignKey("CashAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Account", "CustomerAccount")
                        .WithMany()
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.Account", "SellAccount")
                        .WithMany()
                        .HasForeignKey("SellAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithOne("UserPermissions")
                        .HasForeignKey("DataLayer.Tables.UserPermissions", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Tables.Year", b =>
                {
                    b.HasOne("DataLayer.Tables.User", "User")
                        .WithMany()
                        .HasForeignKey("CreationBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
